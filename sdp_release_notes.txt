             Open Fabrics Enterprise Distribution (OFED)
                    SDP in OFED 1.5.2 Release Notes

                          August 2010



===============================================================================
Table of Contents
===============================================================================
1. Overview
2. Bug Fixes and Enhancements since OFED 1.5.2
3. Known Issues
4. Verification Applications/Flows/Tests

===============================================================================
1. Overview
===============================================================================
SDP in OFED is at GA level for MLNX OFED 1.5.2
Main changes are:
- Inline + blueflame support
- Stability issues
- Bug fixes

Missing features:
- AIO support
- ZCopy pipeline mode
- BUG2160 - Use TCP port space - will enable libsdp bind both TCP and SDP
  sockets in an atomic operation.
- BUG2147 - Support ZCopy when accessing socket in multithreaded environment
- Use fast reg mr's instead of fmr's  

===============================================================================
2. Bug Fixes and Enhancements since OFED 1.5.2
===============================================================================
* Cleanups
    - Added support for 2.6.34 / 2.6.36.

* Bug Fixes
    - Fixed compilation problems on 32 bit hosts
    - Do not compile in debug mode when not asked.
    - Improved recovery from errors.

* Enhancements
    - more statistics in /proc/sdpstats
    - added debugfs for sdp:
     	- sdpprf was moved from /proc to debugfs/sdp
    	- debugfs/<socket_id> - Socket history


===============================================================================
3. Known Issues
===============================================================================
- Sometimes socket bind is failed with EINVAL, because TCP socket was binded
  successfully but SDP was occupied. See Bugzilla 2159 and Bugzilla 2160

- when SO_REUSEADDR is set, can't bind more than one socket to IP_ANY and a
  specific port. TCP does allow doing that unless one of the sockets is
  listening.

- BUG 1331 - TCP allows connecting to IP_ANY - 0.0.0.0 (as a destination address!).
  SDP does not allow connecting to IP_ANY and will reject the connection.

- BUG 1444 - The setsockopt(SO_RCVBUF) is not working in sdp socket. To limit top
  system wide sdp memory usage for recv, use the module parameter top_mem_usage.

- SDP is at beta level on Infinihost HCA family

- Each SDP socket currently consumes up to 2 MBytes of memory. If this value
  is high for your installation, it is possible to trade off performance
  for lower memory utilization per socket by reducing the value of the
  "rcvbuf_scale" module parameter (default: 16).

  Note: The minimum legal value for the "rcvbuf_scale" module is 1.
  At this parameter value, each socket will consume approximately 128 KBytes.

- Small message size performance is low when messages are sent by client
  at a rate lower than the rate at which they are consumed by server,
  and when TCP_CORK is not set. This is observed, for example, with iperf
  benchmark. As a workaround, set the TCP_CORK socket option
  to ensure data is sent in at least 32K byte chunks.

- Performance is low on 32-bit kernels, as SDP utilizes high memory
  to ease memory pressure. Moving to a 64-bit kernel solves this
  problem even if the application remains a 32-bit one.

- By default, SDP utilizes a 2 Kbyte MTU size.  This may cause PCI-X cards
  using Mellanox Technologies "Infinihost" HCAs to experience low bandwidth.
  Workaround:  reset the MTU size to 1K in this situation, using either of
  the two methods below:

  1. Activate the "tavor quirk" workaround in opensm:
     a. Create an opensm options cache file (/var/cache/osm/opensm.opts):
          > opensm --cache-options -o
     b. Add the following line to /var/cache/osm/opensm.opts:
          enable_quirks TRUE
     c. Rerun opensm using your usual command line options to activate
        the opensm quirk option.

  2. Activate the "tavor quirk" workaround in cma:
       set the tavor_quirk module parameter of the rdma_cm module to value 1
       (default: 0).

- When waiting for RX, driver first poll and then arm interrupt and goes to
  sleep. polling duration could be set by recv_poll module parameter. The
  higher this value is, the CPU utilization is higher, and number of
  interrupts is lower.
  This should be fine tuned according to the specific environment and
  application latency.

- ZCopy is enabled by default for blocks larger than 64K. ZCopy can be disabled 
  by setting the module paramter sdp_zcopy_thresh to zero or to any other value 
  by setting it to another non zero value.

- ZCOPY mode gives good performance for large blocks with very small cpu 
  utilization. When in use, all messages longer than 'sdp_zcopy_thresh' bytes 
  in length will cause the user space buffer to be pinned and the data sent 
  directly from the original buffer. This results in less CPU usage and on many 
  systems in enhanced bandwidth.
  ZCOPY is most efficient with multi stream jobs and it performs better as the 
  message size increases.
  The default 64K value for 'sdp_zcopy_thresh' is sometimes too low for some 
  systems. You must experiment with your hardware to select the best value.

- ZCOPY vs BCOPY:
  ZCOPY performance is more efficient in weak cpu and multi streams, whereas 
  BCOPY is more efficient in single stream.

- To disable using SDP over RoCE, set 'sdp_link_layer_ib_only' module parameter 
  to 1.

- to enable debugging of data path, compile driver with CONFIG_SDP_DEBUG_DATA.
  traces are stored in a cyclic buffer in debufs/sdpprf.
  To dump trace to dmesg, use sdp_debug_level:
  bit 0: trace packets
  bit 1: trace SDP driver internals

===============================================================================
4. Verification Applications/Flows/Tests
===============================================================================
- ssh/sshd
- wget/netscape/firefox/apache                  
- netpipe               
- netperf             
- LTP socket tests
- iperf-2.0.2         
- ttcp
- openmpi
- openmpi + Intel MPI benchmarks
- Threaded and forking echo client server examples
- Various Java client server applications (SUN:jre, BEA:jrockit/WebLogic, GNU:gij/gcj)
- Many UNIX utilities to verify that pre-load did not harm the applications


